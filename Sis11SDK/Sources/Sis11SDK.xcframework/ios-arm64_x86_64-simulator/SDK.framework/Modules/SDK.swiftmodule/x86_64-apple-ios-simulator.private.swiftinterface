// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios17.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import SDK
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct ReturnedUserOutData : Swift.Codable {
  public let token: Swift.String
  public let nombre: Swift.String
  public let email: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PayPlan : Swift.Codable, Swift.Identifiable {
  public var id: Swift.Int
  public var lifePolicyId: Swift.Int
  public var transferId: Swift.Int?
  public var numberInYear: Swift.Int
  public var contractYear: Swift.Int
  public var concept: Swift.String?
  public var expected: Swift.Double?
  public var minimum: Swift.Double?
  public var currency: Swift.String
  public var payed: Swift.Double?
  public var allocationDate: Swift.String?, payedDate: Swift.String?
  public var dueDate: Swift.String?, coveredUntil: Swift.String?
  public var changeId: Swift.Int?
  public var created: Swift.String?
  public var allocationId: Swift.Int?
  public var cancellationDate: Swift.String?, compensationDate: Swift.String?
  public var dueAmount: Swift.Double?, pendingAmount: Swift.Double?
  public var dueDays: Swift.Int?
  public var pending: Swift.Bool?, custom: Swift.Bool?
  public typealias ID = Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Relationship : Swift.Codable {
  public var id: Swift.Int
  public var name: Swift.String?
  public var nameInverse: Swift.String?
  public var principalType: Swift.String?
  public var rule: Swift.String?
  public var expires: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PortalData : Swift.Codable {
  public let ok: Swift.Bool
  public let msg: Swift.String
  public let outData: [SDK.Product]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ContactActions {
  #if compiler(>=5.3) && $AsyncAwait
  public func GetContactData() async throws -> SDK.ContactDataOutData?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetContactDataByContactId(contactId: Swift.Int) async throws -> SDK.ContactDataOutData
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetPoliciesByContactId(contactId: Swift.Int) async throws -> [SDK.LifePolicy]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetIssuesByContactId(contactId: Swift.Int) async throws -> [SDK.Issue]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func CreateNewIssue(newIssue: SDK.Issue) async throws -> [SDK.Issue]
  #endif
  @objc deinit
}
public struct Insured : Swift.Codable, Swift.Identifiable {
  public let id: Swift.Int
  public let lifePolicyId: Swift.Int
  public let contactId: Swift.Int
  public let relationship: Swift.Int
  public let role: Swift.Int
  public typealias ID = Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public let sis11sdk: SDK.SDK
@_hasMissingDesignatedInitializers public class SDK {
  public static let shared: SDK.SDK
  final public let contact: SDK.ContactActions
  final public let policy: SDK.RepoLifePolicy
  final public let claim: SDK.RepoClaim
  final public let portal: SDK.Portal
  final public let repo: SDK.Repository
  public var isBackup: Swift.Bool
  public var token: Swift.String
  public var user: SDK.ReturnedUserOutData?
  @objc deinit
}
extension SDK.SDK {
  public func changeApiUrl(newApiUrl: Swift.String)
  public func changeBackupURL(newApiUrl: Swift.String)
  public func getApiUrl() -> Swift.String
  public func getApiRequest() -> Foundation.URLRequest
  public func getApiLoginRequest() -> Foundation.URLRequest
  #if compiler(>=5.3) && $AsyncAwait
  public func doRequest(jsonContent: Foundation.Data) async throws -> Foundation.Data
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func doAuth(credentials: SDK.Credentials) async throws -> SDK.ReturnedUserOutData
  #endif
}
public class LifePolicy : Swift.Codable, Swift.Identifiable {
  public var quoteId: Foundation.UUID?
  final public let id: Swift.Int
  final public let code: Swift.String?
  final public let lob: Swift.String
  final public let active: Swift.Bool
  final public let productCode: Swift.String?
  final public let insuredSum: Foundation.Decimal
  final public let currency: Swift.String?
  final public let start: Swift.String?
  public var end: Swift.String?
  public var annualTotal: Foundation.Decimal
  final public let Coverages: [SDK.Coverage]?
  final public let Insureds: [SDK.Insured]?
  final public let sellerId: Swift.Int?
  final public let holderId: Swift.Int
  final public let payerId: Swift.Int
  final public let segment: Swift.String?
  final public let channel: Swift.String?
  final public let InsuredObjects: [SDK.InsuredObject]?
  final public let plan: Swift.String?
  final public let periodicity: Swift.String?
  final public let policyType: Swift.String?
  public typealias ID = Swift.Int
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RepoClaim {
  #if compiler(>=5.3) && $AsyncAwait
  public func GetClaimsByFilter(filter: Swift.String) async throws -> [SDK.Claim]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetClaimById(id: Swift.Int) async throws -> SDK.Claim?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetClaimsByPolicyId(lifePolicyId: Swift.Int) async throws -> [SDK.Claim]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetClaimsByAffectedId(lifePolicyId: Swift.Int, contactId: Swift.Int) async throws -> [SDK.Claim]
  #endif
  @objc deinit
}
public class DoCmd<T> where T : Swift.Decodable, T : Swift.Encodable {
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  public func ExeChain(chain: Swift.String, context: Swift.String) async throws -> SDK.DoCmdDto<T>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func DoCmd(cmd: Swift.String, data: [Swift.String : Swift.String]) async throws -> SDK.DoCmdDto<T>
  #endif
  @objc deinit
}
public struct Product : Swift.Codable, Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public let code: Swift.String
  public let configJson: Swift.String
  public let lobCode: Swift.String?
  public let name: Swift.String?
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Currency : Swift.Codable {
  public var code: Swift.String
  public var enabled: Swift.Bool
  public var name: Swift.String?
  public var symbol: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RepoLifePolicy {
  #if compiler(>=5.3) && $AsyncAwait
  public func GetPolicyById(id: Swift.Int) async throws -> [SDK.LifePolicy]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetPoliciesByHolderId(holderId: Swift.Int) async throws -> [SDK.LifePolicy]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetPoliciesByFilter(filter: Swift.String) async throws -> [SDK.LifePolicy]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func QuotePortalProduct(jFormValues: [Swift.String : Any], productCode: Swift.String) async throws -> SDK.QuotePortalProductResponse
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetPayPlan(lifePolicyId: Swift.Int) async throws -> [SDK.PayPlan]
  #endif
  @objc deinit
}
public enum APIError : Swift.Error {
  case invalidURL
  case invalidHTTPResponse
  case encodingError
  case requestFailed(Swift.String)
  case decodingError(any Swift.Error)
  case missingParameters(Swift.String)
}
public struct IssueType : Swift.Codable {
  public var code: Swift.String
  public var name: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IssueData : Swift.Codable {
  public var operation: Swift.String
  public var entity: SDK.Issue
  public var filter: Swift.String?
  public init(entity: SDK.Issue, filter: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ContactData : Swift.Codable {
  public let ok: Swift.Bool
  public let msg: Swift.String
  public let outData: SDK.ContactDataOutData?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ContactDataOutData : Swift.Codable {
  public var PoliciesAsHolder: [SDK.LifePolicy]
  public var Claims: [SDK.Claim]
  public var Premiums: [SDK.Premium]
  public var Contact: SDK.Contact
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Contact : Swift.Codable, Swift.Identifiable {
  public let id: Swift.Int
  public var name: Swift.String?
  public var surname1: Swift.String?
  public var surname2: Swift.String?
  public var FullName: Swift.String?
  public var email: Swift.String?
  public var birth: Swift.String?
  public typealias ID = Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EventReason : Swift.Codable {
  public var code: Swift.String
  public var name: Swift.String
  public var disabled: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StateCatalog : Swift.Codable {
  public var id: Swift.Int
  public var code: Swift.String
  public var countryCode: Swift.String?
  public var name: Swift.String?
  public var riskZone: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InsuredEvent : Swift.Codable {
  public var code: Swift.String
  public var name: Swift.String
  public var mode: Swift.String
  public var disabled: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AuthErrors : Swift.Error {
  case loginError
  case invalidUrl
  case invalidData
  case invalidHTTPResponse
  case requestFailed(Swift.String)
  case decodingError(any Swift.Error)
}
public struct City : Swift.Codable {
  public var id: Swift.Int
  public var code: Swift.String?
  public var name: Swift.String?
  public var stateCode: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RepoClaimDTO : Swift.Codable {
  public let ok: Swift.Bool
  public let msg: Swift.String
  public let outData: [SDK.Claim]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IssueReason : Swift.Codable {
  public var code: Swift.String
  public var name: Swift.String
  public var issueType: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class Country : Swift.Codable {
  public var code: Swift.String
  public var name: Swift.String
  public var fatca: Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct InsuredObject : Swift.Codable {
  public let objectDefinitionId: Swift.Int?
  public let jValues: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IssueRequest : Swift.Codable {
  public var cmd: Swift.String
  public var data: SDK.IssueData
  public init(data: SDK.IssueData)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct QuotePortalProductResponse : Swift.Codable {
  public var ok: Swift.Bool
  public var msg: Swift.String
  public var outData: [SDK.LifePolicy]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class Repository {
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  public func GetCountries(page: Swift.Int, size: Swift.Int, filter: Swift.String) async throws -> [SDK.Country]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetStates(page: Swift.Int, size: Swift.Int, filter: Swift.String) async throws -> [SDK.StateCatalog]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetCities(page: Swift.Int, size: Swift.Int, filter: Swift.String) async throws -> [SDK.City]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetCurrencies(page: Swift.Int, size: Swift.Int, filter: Swift.String) async throws -> [SDK.Currency]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetInsuredEvents(page: Swift.Int, size: Swift.Int, filter: Swift.String) async throws -> [SDK.InsuredEvent]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetEventReasons(page: Swift.Int, size: Swift.Int, filter: Swift.String) async throws -> [SDK.EventReason]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func GetEventReasons(page: Swift.Int, size: Swift.Int, filter: Swift.String) async throws -> [SDK.Relationship]
  #endif
  @objc deinit
}
public enum Catalog : Swift.String {
  case Country
  case State
  case City
  case Currency
  case InsuredEvent
  case EventReason
  case RelationShip
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct RepoLifePolicyDTO : Swift.Codable {
  public let ok: Swift.Bool
  public let msg: Swift.String
  public let outData: [SDK.LifePolicy]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct doCmd : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct doCmdData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetPingDTO : Swift.Codable {
  public let user: Swift.String
  public let environment: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class DoCmdDto<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  final public let cmd: Swift.String
  final public let ok: Swift.Bool
  final public let msg: Swift.String
  final public let outData: T
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct Coverage : Swift.Codable, Swift.Identifiable {
  public let id: Swift.Int
  public let code: Swift.String
  public let name: Swift.String
  public let limit: Foundation.Decimal
  public let premium: Foundation.Decimal?
  public let extraPremium: Foundation.Decimal?
  public let start: Swift.String?
  public let end: Swift.String?
  public let description: Swift.String?
  public typealias ID = Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Credentials : Swift.Codable {
  public let email: Swift.String
  public let clave: Swift.String
  public init(email: Swift.String, clave: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Claim : Swift.Codable, Swift.Identifiable {
  public var id: Swift.Int
  public var code: Swift.String?
  public var notification: Swift.String?
  public var claimType: Swift.String?
  public var status: Swift.String?
  public var created: Swift.String?
  public var eventReason: Swift.String?
  public var insuredEvent: Swift.String?
  public var elegibleCoverages: Swift.String?
  public var contactId: Swift.Int
  public var claimerId: Swift.Int
  public var lifePolicyId: Swift.Int
  public var jCustomForms: Swift.String?
  public var EventReason: SDK.EventReason?
  public var InsuredEvent: SDK.InsuredEvent?
  public typealias ID = Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class Portal {
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  public func GetPortalProducts() async throws -> [SDK.Product]
  #endif
  public func ParseProductConfig(product: SDK.Product) throws -> SDK.SelfServiceConfiguration
  @objc deinit
}
public struct SelfServiceConfiguration : Swift.Codable {
  public let SelfService: SDK.SelfService
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SelfService : Swift.Codable {
  public let Quote: SDK.QuoteConfig
  public let MobilePayment: SDK.MobilePayment?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct QuoteConfig : Swift.Codable {
  public let Steps: [SDK.StepConfig]
  public let mobileForm: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StepConfig : Swift.Codable, Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public let title: Swift.String
  public let text: Swift.String
  public let control: Swift.String
  public let name: Swift.String
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MobilePayment : Swift.Codable {
  public let Options: [SDK.Options]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class Options : Swift.Codable, Swift.Identifiable {
  public var id: Foundation.UUID?
  public var title: Swift.String
  public var control: Swift.String
  public var chain: Swift.String?
  public var formId: Swift.Int?
  public var htmlForm: Swift.String?
  public typealias ID = Foundation.UUID?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct ReturnedUser : Swift.Codable {
  public let ok: Swift.Bool
  public let msg: Swift.String
  public let outData: SDK.ReturnedUserOutData?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IssueResponse : Swift.Codable {
  public var cmd: Swift.String
  public var data: SDK.IssueData
  public var msg: Swift.String
  public var ok: Swift.Bool
  public var outData: [SDK.Issue]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Priority : Swift.Codable {
  public var code: Swift.String
  public var name: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Premium : Swift.Codable, Swift.Identifiable {
  public var id: Swift.Int
  public var policyCode: Swift.String?
  public var currency: Swift.String?
  public var amount: Foundation.Decimal
  public var amountPaid: Foundation.Decimal
  public var concept: Swift.String?
  public var contractYear: Swift.Int
  public var numberInYear: Swift.Int
  public var dueDate: Swift.String?
  public var lifePolicyId: Swift.Int
  public var payDate: Swift.String?
  public typealias ID = Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Issue : Swift.Codable {
  public var id: Swift.Int
  public var contactId: Swift.Int
  public var title: Swift.String?
  public var description: Swift.String?
  public var issueType: Swift.String?
  public var issueReason: Swift.String?
  public var priorityCode: Swift.String?
  public var policyId: Swift.Int?
  public var externalId: Swift.String?
  public var lifeCoverageId: Swift.Int?
  public init(id: Swift.Int, contactId: Swift.Int, title: Swift.String? = nil, description: Swift.String? = nil, issueType: Swift.String? = nil, issueReason: Swift.String? = nil, priorityCode: Swift.String? = nil, policyId: Swift.Int? = nil, externalId: Swift.String? = nil, lifeCoverageId: Swift.Int? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SDK.Catalog : Swift.Equatable {}
extension SDK.Catalog : Swift.Hashable {}
extension SDK.Catalog : Swift.RawRepresentable {}
